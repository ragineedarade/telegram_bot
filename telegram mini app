import logging
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import asyncio

# Logging setup
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Main menu keyboard with emojis and better grouping
main_keyboard = ReplyKeyboardMarkup(
    [
        ["🤖 ChatGPT", "🌟 Gemini AI"],
        ["🔍 DeepSeek", "💡 Grok"],
        ["🤝 AI Agents"],
        ["📞 Contact", "❓ Help"]
    ],
    resize_keyboard=True
)

# Help submenu keyboard with emojis
help_keyboard = ReplyKeyboardMarkup(
    [
        ["💬 General Inquiry", "⚠️ Issue With Tool"],
        ["✅ Submit"]
    ],
    resize_keyboard=True
)

# /start command handler


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"👋 Hello {user.first_name}, welcome to *AI Era 2025!* 🚀\n\n"
        "Access powerful AI tools from one place and boost your productivity! 💻✨",
        reply_markup=main_keyboard,
        parse_mode="Markdown"
    )

# Message handler


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "📞 Contact":
        await update.message.reply_text("📧 Email us at: support@aiera2025.com")

    elif text == "❓ Help":
        await update.message.reply_text(
            "🔎 Select your issue or inquiry below:",
            reply_markup=help_keyboard
        )

    elif text == "💬 General Inquiry":
        await update.message.reply_text("📝 Please share your query. We’re here to help! 😊")

    elif text == "⚠️ Issue With Tool":
        await update.message.reply_text("⚙️ Please mention the tool and issue briefly.")

    elif text == "✅ Submit":
        await update.message.reply_text("🙏 Thank you! We’ll review and respond shortly.")

    elif text == "🤝 AI Agents":
        ai_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("✍️ Writing Assistant", web_app=WebAppInfo(
                url="https://yourdomain.com/writing"))],
            [InlineKeyboardButton("🖼️ Image Generator", web_app=WebAppInfo(
                url="https://yourdomain.com/image"))],
            [InlineKeyboardButton("📊 Grammer Analyzer", web_app=WebAppInfo(
                url="https://www.grammarly.com/?utm_source=chatgpt.com"))],
            [InlineKeyboardButton("💻 Code Explainer", web_app=WebAppInfo(
                url="https://yourdomain.com/code"))],
            [InlineKeyboardButton("📚 Book Summary", web_app=WebAppInfo(
                url="https://yourdomain.com/summary"))]
        ])
        await update.message.reply_text(
            "🤖 Select an AI Agent to launch:",
            reply_markup=ai_keyboard
        )

    elif text == "🤖 ChatGPT" or text == "ChatGPT":
        await update.message.reply_text(
            "🚀 Launching ChatGPT...",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("Open ChatGPT", web_app=WebAppInfo(
                    url="https://yourdomain.com/chatgpt"))]]
            )
        )

    elif text == "🌟 Gemini AI" or text == "Gemini AI":
        await update.message.reply_text(
            "🚀 Launching Gemini AI...",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("Open Gemini AI", web_app=WebAppInfo(
                    url="https://yourdomain.com/gemini"))]]
            )
        )

    elif text == "🔍 DeepSeek" or text == "DeepSeek":
        await update.message.reply_text(
            "🚀 Launching DeepSeek...",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("Open DeepSeek", web_app=WebAppInfo(
                    url="https://yourdomain.com/deepseek"))]]
            )
        )

    elif text == "💡 Grok" or text == "Grok":
        await update.message.reply_text(
            "🚀 Launching Grok...",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("Open Grok", web_app=WebAppInfo(
                    url="https://yourdomain.com/grok"))]]
            )
        )

    else:
        await update.message.reply_text(
            "❓ I didn’t understand that. Please use the options below.",
            reply_markup=main_keyboard
        )

# Coroutine to delete webhook before polling


async def delete_webhook(token: str):
    app = ApplicationBuilder().token(token).build()
    await app.bot.delete_webhook()


def main():
    TOKEN = "7596648132:AAEej8lW2TBpqEqmj0KA8M7t3eXCD-hjt6I"

    # Delete webhook first (run this synchronously here)

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, handle_message))

    print("🤖 AI Era 2025 Bot is running...")

    # Create and set a new event loop explicitly (fix for Python 3.12+)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # Now run polling (this blocks and runs in the new event loop)
    app.run_polling()


if __name__ == "__main__":
    main()
